<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Web Crawler</title>
    <url>/2019/12/27/Web-Crawler/</url>
    <content><![CDATA[<h3 id="学习爬虫"><a href="#学习爬虫" class="headerlink" title="学习爬虫"></a>学习爬虫</h3><h4 id="第一步：第一个爬虫"><a href="#第一步：第一个爬虫" class="headerlink" title="第一步：第一个爬虫"></a>第一步：第一个爬虫</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:UTF-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">link = <span class="string">"https://comsir.github.io/"</span></span><br><span class="line">headers = &#123;<span class="string">'User-agent'</span>:<span class="string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 FireFox/3.5.6'</span>&#125;</span><br><span class="line">r = requests.get(link, headers = headers)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>

<p>爬取 <a href="https://comsir.github.io/" target="_blank" rel="noopener">我的博客</a>首页的所有内容 </p>
<p>使用requests.get(link, headers= headers)获取网页</p>
<p>用requests的headers伪装成浏览器访问。</p>
<p>r是requests的Response回复对象，我们从中可以获取想要的信息。r.text是获取的网页内容代码。</p>
<h4 id="第二步：提取需要的数据"><a href="#第二步：提取需要的数据" class="headerlink" title="第二步：提取需要的数据"></a>第二步：提取需要的数据</h4><a id="more"></a>

<p>提取第一篇文章的标题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:UTF-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">link = <span class="string">"https://comsir.github.io/"</span></span><br><span class="line">headers = &#123;<span class="string">'User-agent'</span>:<span class="string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 FireFox/3.5.6'</span>&#125;</span><br><span class="line">r = requests.get(link, headers = headers)</span><br><span class="line">soup = BeautifulSoup(r.text, <span class="string">"lxml"</span>) <span class="comment">#使用BeautifulSoup解析这段代码</span></span><br><span class="line">title = soup.find(<span class="string">"h1"</span>, class_=<span class="string">"post-title"</span>).a.text.strip()</span><br><span class="line">print(title)</span><br></pre></td></tr></table></figure>

<h4 id="第三步：存储数据"><a href="#第三步：存储数据" class="headerlink" title="第三步：存储数据"></a>第三步：存储数据</h4><p>只需要在第二步的基础上添加如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'title.txt'</span>, <span class="string">"a+"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(title)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<p>表示存储在与python文件在同一个文件夹下</p>
<h4 id="第四步：静态爬虫项目：豆瓣top250"><a href="#第四步：静态爬虫项目：豆瓣top250" class="headerlink" title="第四步：静态爬虫项目：豆瓣top250"></a>第四步：静态爬虫项目：豆瓣top250</h4><p>爬取豆瓣top250电影的名字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">headers=&#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0'</span>&#125;</span><br><span class="line">index_url = <span class="string">'https://movie.douban.com/top250'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url)</span>:</span></span><br><span class="line">    html = requests.get(url, headers=headers).text</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_list</span><span class="params">(html)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">    movie_names = []</span><br><span class="line">    movie_info = []</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> soup.find_all(<span class="string">'div'</span>, <span class="string">'hd'</span>):</span><br><span class="line">        name = t.find(<span class="string">'span'</span>, <span class="string">'title'</span>).get_text()</span><br><span class="line">        movie_names.append(name)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> soup.find_all(<span class="string">'div'</span>, <span class="string">'info'</span>):</span><br><span class="line">        info = t.find(<span class="string">'p'</span>).get_text().replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">        movie_info.append(info)</span><br><span class="line">    next_page = soup.find(<span class="string">'span'</span>, <span class="string">'next'</span>).find(<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">if</span> next_page:</span><br><span class="line">        <span class="keyword">return</span> movie_names, movie_info, index_url + next_page[<span class="string">'href'</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> movie_names, movie_info, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    order = <span class="number">1</span></span><br><span class="line">    url = index_url</span><br><span class="line">    <span class="keyword">with</span> codecs.open(<span class="string">'top250.csv'</span>, <span class="string">'wb'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> url:</span><br><span class="line">            html = get_html(url)</span><br><span class="line">            names, info, url = create_list(html)</span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">25</span>):</span><br><span class="line">                f.write(<span class="string">'Top '</span> + str(order) + <span class="string">' '</span> + names[n] + <span class="string">'\r\n'</span>)</span><br><span class="line">                f.write(info[n] + <span class="string">'\r\n'</span>)</span><br><span class="line">                order = order + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h4 id="第五步：爬取动态网页：爬取网站评论"><a href="#第五步：爬取动态网页：爬取网站评论" class="headerlink" title="第五步：爬取动态网页：爬取网站评论"></a>第五步：爬取动态网页：爬取网站评论</h4><p>使用使用浏览器渲染的方法将爬取动态网页变成爬取静态网页</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__author__ = <span class="string">'Administrator'</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.Chrome(executable_path = <span class="string">r'C:\Users\15732\Downloads\chromedriver_win32\chromedriver.exe'</span>)</span><br><span class="line"><span class="comment">#把上述地址改成你电脑中chromedriver.exe程序的地址</span></span><br><span class="line">driver.get(<span class="string">"http://www.santostang.com/2018/07/04/hello-world/"</span>)</span><br><span class="line"> </span><br><span class="line">driver.switch_to.frame(driver.find_element_by_css_selector(<span class="string">"iframe[title='livere']"</span>))</span><br><span class="line"><span class="comment">#selenium提供了switch_to.frame()方法来切换frame</span></span><br><span class="line">comment = driver.find_element_by_css_selector(<span class="string">'#list &gt; div:nth-child(1) &gt; div.reply-bottom &gt; div.reply-content-wrapper'</span>)</span><br><span class="line">content = comment.find_element_by_tag_name(<span class="string">'p'</span>)</span><br><span class="line"><span class="keyword">print</span> (content.text)</span><br></pre></td></tr></table></figure>

<p>参考blog: <a href="https://blog.csdn.net/qq_32426313/article/details/100131908" target="_blank" rel="noopener">https://blog.csdn.net/qq_32426313/article/details/100131908</a></p>
<p>爬取深圳短租数据</p>
<p>1.先都是分析网页 找到我们需要的数据在网页中是什么格式</p>
<p>2.然后找到房子包含房子所有信息的div 做成list</p>
<p>3.遍历这个list 分别找到房子中需要的数据 然后状态一个字典中 输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__author__ = <span class="string">'Administrator'</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">driver = webdriver.Chrome(executable_path = <span class="string">r'C:\Users\15732\Downloads\chromedriver_win32\chromedriver.exe'</span>)</span><br><span class="line"><span class="comment">#在虚拟浏览器中打开 Airbnb 页面</span></span><br><span class="line">driver.get(<span class="string">"https://zh.airbnb.com/s/Shenzhen--China?page=1"</span>)</span><br><span class="line">rent_list = driver.find_elements_by_css_selector(<span class="string">'div._v72lrv'</span>)</span><br><span class="line"><span class="comment"># print(rent_list.text)</span></span><br><span class="line"><span class="keyword">for</span> eachhouse <span class="keyword">in</span> rent_list:</span><br><span class="line">    price = eachhouse.find_element_by_css_selector(<span class="string">'span._69pvqtq'</span>)</span><br><span class="line">    price = price.text</span><br><span class="line">    <span class="comment">#print(price.text)</span></span><br><span class="line">    name = eachhouse.find_element_by_css_selector(<span class="string">'div._qrfr9x5'</span>)</span><br><span class="line">    name = name.text</span><br><span class="line">    comment = eachhouse.find_element_by_css_selector(<span class="string">'div._36rlri'</span>)</span><br><span class="line">    comment = comment.text</span><br><span class="line">     <span class="comment">#找到房屋类型，大小</span></span><br><span class="line">    details = eachhouse.find_elements_by_css_selector(<span class="string">'span._faldii7'</span>)</span><br><span class="line">    details = details[<span class="number">0</span>].text</span><br><span class="line">    house_type = details.split(<span class="string">" · "</span>)[<span class="number">0</span>]</span><br><span class="line">    bed_number = details.split(<span class="string">" · "</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">print</span> (price, name, house_type, bed_number,comment)</span><br></pre></td></tr></table></figure>

<p>爬取苏州楼盘价格存入Excel</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">headers=&#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">        &#125;</span><br><span class="line">total=[]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_loupan</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res=requests.get(url,headers=headers)</span><br><span class="line">        soup=BeautifulSoup(res.text,<span class="string">'html.parser'</span>)</span><br><span class="line">        titles=soup.find_all(<span class="string">'span'</span>,class_=<span class="string">'items-name'</span>)</span><br><span class="line">        title=list(map(<span class="keyword">lambda</span> x:x.text,titles))</span><br><span class="line">        dizhis=soup.find_all(<span class="string">'span'</span>,class_=<span class="string">'list-map'</span>)</span><br><span class="line">        dizhi=list(map(<span class="keyword">lambda</span> x:x.text,dizhis))</span><br><span class="line">        diqus=soup.find_all(<span class="string">'span'</span>,class_=<span class="string">'list-map'</span>)</span><br><span class="line">        diqu=list(map(<span class="keyword">lambda</span> x:x.text.split(<span class="string">'\xa0'</span>)[<span class="number">1</span>],diqus))</span><br><span class="line">        mianjis_quan=soup.find_all(<span class="string">'a'</span>,class_=<span class="string">'huxing'</span>)</span><br><span class="line">        mianji_quan=list(map(<span class="keyword">lambda</span> x:x.text,mianjis_quan))</span><br><span class="line">        mianjis=soup.find_all(<span class="string">'a'</span>,class_=<span class="string">'huxing'</span>)</span><br><span class="line">        mianji=list(map(<span class="keyword">lambda</span> x:x.text.split(<span class="string">'\t'</span>)[<span class="number">-1</span>].strip(),mianjis))</span><br><span class="line">        jiages=soup.find_all(<span class="string">'a'</span>,class_=<span class="string">'favor-pos'</span>)</span><br><span class="line">        jiage=list(map(<span class="keyword">lambda</span> x:x.p.text,jiages))</span><br><span class="line">        <span class="keyword">for</span> tit,dizhi,diqu,mianq,mianj,jiage <span class="keyword">in</span> zip(title,dizhi,diqu,mianji_quan,mianji,jiage):</span><br><span class="line">            info=&#123;<span class="string">'标题'</span>:tit,</span><br><span class="line">                  <span class="string">'地址'</span>:dizhi,</span><br><span class="line">                  <span class="string">'地区'</span>:diqu,</span><br><span class="line">                  <span class="string">'面积（全）'</span>:mianq,</span><br><span class="line">                  <span class="string">'面积'</span>:mianj,</span><br><span class="line">                  <span class="string">'价格'</span>:jiage&#125;</span><br><span class="line">            total.append(info)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">        <span class="comment">#https://beijing.anjuke.com/sale/p1/#filtersort</span></span><br><span class="line">        url=<span class="string">'https://su.fang.anjuke.com/loupan/all/p&#123;&#125;/'</span>.format(i)</span><br><span class="line">        get_loupan(url)</span><br><span class="line">        print(<span class="string">'第&#123;&#125;页抓取完毕'</span>.format(i))</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df=pd.DataFrame(total)</span><br><span class="line">df.to_excel(<span class="string">'安居客_苏州.xls'</span>)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Ended with marriage</title>
    <url>/2019/12/26/Ended-with-marriage/</url>
    <content><![CDATA[<p>原文链接：<a href="https://mp.weixin.qq.com/s/K6qnnSkSXzmWbh_AWCJUSw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/K6qnnSkSXzmWbh_AWCJUSw</a></p>
<p>来自公众号 ：思想聚焦</p>
<p>听说，人在要死的那一刻，过往的经历会在眼前闪现：儿时单纯的愉悦，上学时的积极，结婚生子的人生转折…</p>
<p>富兰克林说：“有的人25岁就死了，只是到75岁才埋葬”。</p>
<p>其实，许多人的一生，在结完婚之后，就结束了。</p>
<a id="more"></a>

<p><strong>18岁</strong></p>
<p>你终于上了大学</p>
<p>虽然不是心仪的学校</p>
<p>但至少能混个本科学历</p>
<p>听说，这样好找工作</p>
<p><strong>20岁</strong></p>
<p>大二这年</p>
<p>你如愿参加了社团</p>
<p>学会了喝酒</p>
<p>学会了说场面话</p>
<p>可看着那门被挂掉的科目时</p>
<p>你有点后悔</p>
<p>质问自己这两年到底做了些什么</p>
<p><strong>22岁</strong></p>
<p>你大学毕业了</p>
<p>却发现那张普通的文凭</p>
<p>只够找份不上不下的工作</p>
<p>交完了房租</p>
<p>卡里就不剩什么钱了</p>
<p>追星都难，只能白嫖</p>
<p>此时你还不知道</p>
<p>大学的好朋友，这辈子见不了几次了</p>
<p><strong>25岁</strong></p>
<p>你觉得自己太缺钱了</p>
<p>想做点小生意</p>
<p>可还是害怕风险放弃了</p>
<p>这份安稳的工作，你谈不上喜欢</p>
<p>却也找不到辞职的理由 </p>
<p>每次回到家</p>
<p>爸妈总唠叨着给你安排相亲</p>
<p>“那谁，从小看着长大，知根知底挺好的”</p>
<p>“那谁，985大学毕业，公务员，安稳”</p>
<p>……</p>
<p>你嘴上总说着“不急不急”</p>
<p>其实心里却试着说服自己：要不，就别挑了？</p>
<p><strong>27岁</strong></p>
<p>你居然在相亲中遇见了同学</p>
<p>你觉得有点好笑</p>
<p>这个差不多的同学</p>
<p>差不多的样貌、家庭、年龄</p>
<p>爸妈劝你：你都不年轻了，嫁了吧</p>
<p>你也开始说服自己说：是挺好的</p>
<p><strong>28岁</strong></p>
<p>你们终于结婚了</p>
<p>双方父母包办了房子、车子、酒席</p>
<p> 一切都被安排得妥妥当当</p>
<p>婚礼上 </p>
<p>你们也如愿象征性地接了个吻</p>
<p>没有小鹿乱撞的心跳</p>
<p>敬酒时大家都在祝福着你们</p>
<p>百年好合、早生贵子</p>
<p>羡慕你的新婚，说你是幸福的新娘</p>
<p>在酒过三巡，看着早已喝得面红耳赤的他时</p>
<p>你只是暗暗地想着：但愿如此</p>
<p>但你觉得，有些东西没有了</p>
<p><strong>29岁</strong></p>
<p>你怀孕了</p>
<p>婆婆劝你辞掉工作，养胎要紧</p>
<p>老公说他会养你</p>
<p>你拗不过，辞职养胎</p>
<p>婆婆的汤水补品，说是“为了补身体”</p>
<p>其实你也知道，一切是为了孩子</p>
<p>你孕吐腰疼腿肿，心情不好跟老公诉苦</p>
<p>可他说：别矫情了，我工作也挺累的</p>
<p>生宝宝那天，你终于感受到</p>
<p>人们常说生孩子要忍断20根骨头的疼痛</p>
<p>可比生孩子更难受的，是生完孩子后</p>
<p>老公和家里人只停留在孩子身上的眼光</p>
<p>那刻你才突然意识到</p>
<p>孩子的到来是一家人的狂欢，</p>
<p>却是一个人的孤单</p>
<p><strong>32岁</strong></p>
<p>孩子终于上幼儿园了</p>
<p>家里留下了变胖走形的你 </p>
<p>你埋怨公婆，和丈夫争吵</p>
<p>你暗自笑了笑，从什么时候开始</p>
<p>我终于活成了自己最讨厌的样子</p>
<p>你也不是没尝试过找工作</p>
<p>是被Hr频频地拒绝</p>
<p> 你只能做起了微商……</p>
<p>你瞧不起的职业</p>
<p><strong>35岁</strong></p>
<p>孩子上了小学，</p>
<p>家里的开支不断地增加</p>
<p>小孩子成了碎钞机</p>
<p>夏令营17999，</p>
<p>英语补习班8999</p>
<p>钢琴课200/时</p>
<p>……</p>
<p>那句“爸妈负担不起”</p>
<p>无数次如鲠在喉</p>
<p>但怎么也说不出口</p>
<p>你安慰着自己</p>
<p>再怎么省，也不能委屈孩子</p>
<p><strong>40岁</strong></p>
<p>原以为孩子听话，工作安稳，丈夫升职加薪</p>
<p>生活也在慢慢地变好</p>
<p>直到看到老公手包里那条昂贵项链</p>
<p>你们大吵一架</p>
<p>你骂他出轨不是人</p>
<p>他说你泼妇得不像个女人</p>
<p>可最后，你们还是和好了</p>
<p>因为爸妈说：孩子需要一个完整的家</p>
<p>闺蜜说：男人偷腥是常有的事，会回家就好</p>
<p>你已经不记得多久没收到过他的礼物了？ </p>
<p>可安慰着自己说：还是算了吧</p>
<p><strong>43岁</strong></p>
<p>孩子要住宿</p>
<p>当初那个跟你无话不谈的女儿</p>
<p>却只会说说：“不要管我，说了你也不懂”</p>
<p>你担心她行差踏错，担心她开始早恋吃亏</p>
<p>可你的越是靠近，孩子却离你越远</p>
<p> 于是，你吼孩子更大声了</p>
<p>家，却安静得难以习惯</p>
<p>电话孩子那头，只会“嗯，好，哦”</p>
<p>丈夫回家，只会“我回来了”</p>
<p>然后，是寂静的沉默</p>
<p>日子也没什么异样</p>
<p>只是深夜入睡的时间，变得越来越短</p>
<p><strong>48岁</strong></p>
<p>孩子要高考了</p>
<p>你别他还紧张，劳累</p>
<p>你希望她能填个离家近点的学校，</p>
<p>报个好找工作的志愿 </p>
<p>可孩子偏偏不听</p>
<p>你忽然回想当年的高考</p>
<p>如果也没听妈妈的话</p>
<p>现在的生活会不会有一点的不一样？</p>
<p><strong>50岁</strong></p>
<p>孩子第一次主动打电话回家</p>
<p>说他说想家了，爸最近还好吗？</p>
<p>你嗯了一声，说都好着呢</p>
<p>盖了电话后</p>
<p>你看着躺在床上刚手术完的丈夫</p>
<p>安慰着老伴说：</p>
<p>你就快点好起来，孩子都想见你了</p>
<p><strong>52岁</strong></p>
<p>孩子终于大学毕业 </p>
<p> 你每天都刷孩子的朋友圈几次</p>
<p>想了解她最近在忙点什么</p>
<p>但遗憾的是，孩子总是很少更新</p>
<p>每次来电都回复说“挺好的”</p>
<p>直到有天孩子说要回家</p>
<p>说还是听妈妈的话，考个公务员吧</p>
<p><strong>57岁</strong></p>
<p>孩子带了个男生回家</p>
<p>送走男生后，孩子说是她的结婚对象</p>
<p>本地户口，有车有房，国企员工</p>
<p>你问她喜欢男生什么</p>
<p>孩子回答了几个理由：</p>
<p>性格挺合适的，他对我挺好…</p>
<p>数个理由却半字不提爱情</p>
<p>像极了当年的你</p>
<p>但无论如何</p>
<p>孩子结婚也算是圆了你俩的心愿</p>
<p>你还是执拗地相信，她能过得比你幸福</p>
<p><strong>60岁</strong></p>
<p>盼了许久的孙子出生了</p>
<p>带孙子的任务却落在了你手中</p>
<p>你跟老伴也不得不将退休后的旅行计划</p>
<p>无限期地搁置</p>
<p>看着手上那牙牙学语的婴儿</p>
<p>刹那仿佛回到那最辛苦的一年</p>
<p>区别在于，这次有老伴的帮忙</p>
<p><strong>68岁</strong></p>
<p>孩子的孩子长大了，不用操心了</p>
<p>可你也彻底老了</p>
<p>天一冷那老寒腿就钻心的疼</p>
<p>走上几步路就气喘得不行 </p>
<p>还是有点遗憾</p>
<p>你明明什么都没有做</p>
<p>却忽然地老了</p>
<p><strong>78岁</strong></p>
<p>这一天，终于还是要来的</p>
<p>你躺在床上，忽然地意识清醒</p>
<p>看着周围的人都以泪洗脸</p>
<p>你明白你要死了</p>
<p>可你却没有一丝的恐惧</p>
<p>回忆浮现了许多过往的记忆碎片</p>
<p>第一次到游乐园时欢快地玩耍</p>
<p>第一次恋爱时的小鹿乱撞</p>
<p>第一次失恋时的心如刀割</p>
<p>……</p>
<p>最后，时间定格在你28岁结婚当天</p>
<p>我到底什么时候就死了？</p>
<p>原来，那时候</p>
<p>你已经死掉了</p>
<p>身边的人嚎啕大哭</p>
<p>在意识即将逝去的一瞬</p>
<p>你问了自己最后一个问题：</p>
<p>这真的是我想要的一生吗？</p>
<p><strong>当然不是 以此为戒！！</strong></p>
]]></content>
      <tags>
        <tag>Talk</tag>
      </tags>
  </entry>
  <entry>
    <title>how to be a Apache Contributor</title>
    <url>/2019/12/25/how-to-be-a-Apache-Contributor/</url>
    <content><![CDATA[<p>很好的文章 <a href="https://mp.weixin.qq.com/s/A_OQkpnUSuBaBCYezGFzFw" target="_blank" rel="noopener">原文链接</a></p>
<p>以Apache Hudi为例，讲解如何通过一行代码成为Apache顶级项目的Contributor。</p>
<a id="more"></a>

<h3 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h3><h4 id="1-1-Github准备"><a href="#1-1-Github准备" class="headerlink" title="1.1 Github准备"></a>1.1 Github准备</h4><p>1) 准备 <code>github</code>账号，通过<a href="https://github.com/join注册，记住注册的邮箱和用户名。" target="_blank" rel="noopener">https://github.com/join注册，记住注册的邮箱和用户名。</a></p>
<p>2) Fork Apache Hudi项目(<a href="https://github.com/apache/incubator-hudi)至自己(TheApacheHudi)的远程仓库" target="_blank" rel="noopener">https://github.com/apache/incubator-hudi)至自己(TheApacheHudi)的远程仓库</a></p>
<p>3) 将资源远程仓库clone至本地</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/comsir/incubator-hudi.git</span></span><br><span class="line">Cloning into 'incubator-hudi'...</span><br><span class="line">remote: Enumerating objects: 1, done.</span><br><span class="line">remote: Counting objects: 100% (1/1), done.</span><br><span class="line">remote: Total 24234 (delta 0), reused 0 (delta 0), pack-reused 24233</span><br><span class="line">Receiving objects: 100% (24234/24234), 9.79 MiB | 397.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (11736/11736), done.</span><br></pre></td></tr></table></figure>

<p>4) 进入到incubator-hudi目录后添加Apache Hudi为<strong>upstream</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote add upstream https://github.com/comsir/incubator-hudi.git</span></span><br></pre></td></tr></table></figure>

<p>5) 使用 <code>git remote-v</code>查看项目状态，如下表示自己（TheApacheHudi）远程仓库为<strong>origin</strong>，而Apache远程仓库为<strong>upstream</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line">origin  https://github.com/comsir/incubator-hudi.git (fetch)</span><br><span class="line">origin  https://github.com/comsir/incubator-hudi.git (push)</span><br><span class="line">upstream        https://github.com/comsir/incubator-hudi.git (fetch)</span><br><span class="line">upstream        https://github.com/comsir/incubator-hudi.git (push)</span><br></pre></td></tr></table></figure>

<p>6) 使用 <code>git config user.name xxx;git config user.email xxx</code>配置用户名和邮箱，注意用户名和邮箱需要使用注册Github使用的用户名和邮箱，这样后续才能正常显示 <code>Contributor</code>标志(如果以前已经配置过 可跳过)</p>
<p>这样之后就可以自己修改代码了！</p>
<h4 id="1-2-邮箱订阅"><a href="#1-2-邮箱订阅" class="headerlink" title="1.2 邮箱订阅"></a>1.2 邮箱订阅</h4><p>为方便参与社区讨论，请务必订阅<a href="mailto:dev@hudi.apache.org">dev@hudi.apache.org</a>开发者邮件列表，订阅方法很简单，只需向<a href="mailto:dev-subscribe@hudi.apache.org">dev-subscribe@hudi.apache.org</a>发送一封空邮件，然后马上会收到<a href="mailto:dev-help@hudi.apache.org">dev-help@hudi.apache.org</a>回复的一封邮件，然后对该邮件再点击最下方的回复按钮（以Google邮箱为例）进行一次回复即可（如回复comfirm）</p>
<p>回复完之后会收到一封正式的欢迎邮件，表示已经订阅完成，后续便可参与社区的讨论</p>
<h4 id="1-3-JIRA准备"><a href="#1-3-JIRA准备" class="headerlink" title="1.3 JIRA准备"></a>1.3 JIRA准备</h4><p>几乎所有Apache顶级项目都是通过JIRA来管理issue，所以注册JIRA账号必不可少。</p>
<p>1) 准备jira账号，通过<a href="https://issues.apache.org/jira/secure/Signup!default.jspa注册，请记住JIRA" target="_blank" rel="noopener">https://issues.apache.org/jira/secure/Signup!default.jspa注册，请记住JIRA</a> ID，已有账号可直接登录。</p>
<p>2) 查看HUDI所有issue（<a href="https://issues.apache.org/jira/projects/HUDI/issues）。" target="_blank" rel="noopener">https://issues.apache.org/jira/projects/HUDI/issues）。</a></p>
<p>3) 若有合适的issue，可点击右侧的Assign to me(分配给我)，对于较为复杂的issue，可在issue下评论讨论实现思路，确保达成一致后再开始写代码。</p>
<p>4) 若登录后发现无 <code>Assignto me（分配给我）</code>按钮，那么需要向<a href="mailto:dev@hudi.apache.org">dev@hudi.apache.org</a>邮箱发送一封JIRA权限开通申请邮件，可参照如下模版发送。</p>
<p><em>Hi,</em></p>
<p><em>I want to contribute to Apache Hudi. Would you please give me the contributor permission? My JIRA ID is xxx.</em></p>
<p>当项目PMC看到邮件后，会给你开通相应权限（由于时差原因，回复可能有些延迟）。</p>
<h4 id="1-4-Confluence准备"><a href="#1-4-Confluence准备" class="headerlink" title="1.4 Confluence准备"></a>1.4 Confluence准备</h4><p>同样，Apache顶级项目会通过Confluence来管理一些改进计划，如Hudi的RFC，当你想要对Hudi添加一些大的特性时，需要在Confluence创建RFC（<a href="https://cwiki.apache.org/confluence/display/HUDI/Apache+Hudi），若无权限，也需要向dev@hudi.apache.org邮箱发送一封申请邮件，与申请JIRA权限类似，带上自己的Confluence" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/HUDI/Apache+Hudi），若无权限，也需要向dev@hudi.apache.org邮箱发送一封申请邮件，与申请JIRA权限类似，带上自己的Confluence</a> ID，会有PMC给你开通权限。几乎所有问题都可向<a href="mailto:dev@hudi.apache.org">dev@hudi.apache.org</a>邮箱求助。</p>
<h3 id="2-提交代码"><a href="#2-提交代码" class="headerlink" title="2. 提交代码"></a>2. 提交代码</h3><p>对于一些初次参与社区的开发者而言，一种较好的上手方式就是 <code>fix typo</code>，即修复单词错误，比如，如下的单词错误</p>
<p>1) 基于master分支checkout一个新分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b typofix</span></span><br><span class="line">Switched to a new branch 'typofix'</span><br><span class="line">M       hudi-common/src/main/java/org/apache/hudi/common/util/RocksDBDAO.java</span><br></pre></td></tr></table></figure>

<p>2) 使用 <code>git add.</code>， <code>git commit-m&quot;[MINOR] fix typo&quot;</code>， <code>git push origin typofix:typofix</code>推至自己远端仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"[MINOR] fix typo"</span></span></span><br><span class="line">[typofix 1bfd61ca] [MINOR] fix typo</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin typofix:typofix</span></span><br><span class="line">Enumerating objects: 23, done.</span><br><span class="line">Counting objects: 100% (23/23), done.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (9/9), done.</span><br><span class="line">Writing objects: 100% (12/12), 836 bytes | 418.00 KiB/s, done.</span><br><span class="line">Total 12 (delta 5), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (5/5), completed with 5 local objects.</span><br><span class="line">remote:</span><br><span class="line">remote: Create a pull request for 'typofix' on GitHub by visiting:</span><br><span class="line">remote:      https://github.com/comsir/incubator-hudi/pull/new/typofix</span><br><span class="line">remote:</span><br><span class="line">To https://github.com/comsir/incubator-hudi.git</span><br><span class="line"> * [new branch]        typofix -&gt; typofix</span><br></pre></td></tr></table></figure>



<p>3) 进入Apache/Hudi github页面，会出现 <code>Compare&amp;pull request</code>按钮</p>
<p>4) 点击 <code>Compare&amp;pull request</code>，补充PR描述信息后，点击 <code>Createpull request</code>即可</p>
<p><img src="C:%5CUsers%5C15732%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191225114230586.png" alt="image-20191225114230586"></p>
<p>5) 这样便完成提交PR的过程，后续等待committer帮忙review代码、根据意见修改代码和合并PR，当合并后，恭喜你，正式成为Apache顶级项目的contributor</p>
<p><img src="C:%5CUsers%5C15732%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191225114745499.png" alt="image-20191225114745499"></p>
<p>当然上述 <code>typo fix</code>可用作熟悉整体流程，一旦熟悉后，可尝试进行一些bug fix或开发新的feature、回答邮件列表问题、参与邮件列表讨论等，都会有助于更快速成为committer。</p>
<p>对于Apache Hudi项目，现在还有些非常简单的任务可供新手上手，如<a href="https://issues.apache.org/jira/browse/HUDI-233（使用SLF4J重做项目日志）；https://issues.apache.org/jira/browse/HUDI-385（scala" target="_blank" rel="noopener">https://issues.apache.org/jira/browse/HUDI-233（使用SLF4J重做项目日志）；https://issues.apache.org/jira/browse/HUDI-385（scala</a> checkstyle处理），欢迎想要参与社区的开发者认领issue，成为Apache的contributor。</p>
<p><strong>其他Apache顶级项目（如Flink/Spark/HBase）的社区参与与上述步骤类似。</strong></p>
<h3 id="2-总结"><a href="#2-总结" class="headerlink" title="2. 总结"></a>2. 总结</h3><p>想成为Apache的contributor或熟悉PR提交流程，一种简单参考样例是通过 <code>typo fix</code>上手，熟悉流程后可做更多事情，这样可早日成为Apache committer。</p>
]]></content>
      <tags>
        <tag>apache Hudi</tag>
      </tags>
  </entry>
  <entry>
    <title>DDoS攻击介绍（一） 原理</title>
    <url>/2019/12/20/DDoS%E6%94%BB%E5%87%BB%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%B8%80%EF%BC%89-%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="一、DoS介绍"><a href="#一、DoS介绍" class="headerlink" title="一、DoS介绍"></a>一、DoS介绍</h2><p>DoS全称为拒绝服务 。是一种实现简单又很有效的针对服务器进行的攻击方式，其目的就是让被攻击的主机和服务器拒绝正常用户的访问，造成服务器的瘫痪。</p>
<a id="more"></a>

<p>攻击的基本流程为：</p>
<p>1.攻击者向目标服务器发出大量的虚假IP地址服务请求</p>
<p>2.被攻击者在接受到请求之后，返回确认信息并等待攻击者的确认（TCP三次握手）</p>
<p>3.由于攻击者发送的信息都是虚假的，所以被攻击服务器无法接受到确认信息从而一直处于等待状态</p>
<p>而服务器分配给这次请求的资源却被一直占用无法被释放。</p>
<p>4.当被攻击者等待回复超时时，链接会中断，这是攻击者再次发送新的虚假服务请求。</p>
<p>5.就这样，服务器资源不断地被占用，直到瘫痪。</p>
<h2 id="二、DDoS介绍"><a href="#二、DDoS介绍" class="headerlink" title="二、DDoS介绍"></a>二、DDoS介绍</h2><p>DDoS全程为分布式拒绝服务，是在DoS基础之上进行的更大规模，更大范围的攻击方式。</p>
<p>Dos只是单机与单机之间的攻击模式 ，而DDoS是利用一批受控制的僵尸主机向目标服务器或者网络发起攻击，其攻击的强度和带来的危险都比DoS大的多。</p>
<p>DDoS的攻击过程如下图所示：</p>
<p><img src="C:%5CUsers%5C15732%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191220211529981.png" alt="image-20191220211529981"></p>
<p>​        首先，DDoS攻击者控制一批傀儡机，即在网络上发现系统具有相关漏洞的主机，然后进行人侵、安装控制程序，入侵的越多，控制的傀儡机就越多，攻击源就更多。然后把被控制的僵尸主机进行分配，一部分充当攻击的主要控制端，一部分充当攻击源。控制端只负责发送攻击者的控制命令而不参与实际的发包攻击，而傀儡机只负责向目标发送DDoS攻击数据包。整个僵尸网络，在攻击者统一的指挥下，对被攻击的服务器发起攻击，致使目标网络或者服务器瘫痪。</p>
<p>​        由于这种攻击模式下，攻击者深藏在幕后，而且控制器和傀儡机间的通信，和正常的主机间的通信没有区别，因此攻击者很难被监控系统跟踪，DDoS攻击者的隐蔽性极强，这也对DDoS的反向追踪带来了很大的难度。<br>DDoS攻击能够成为黑客的“宠儿”，主要由于以下几个原因：</p>
<p>１、成本低：在日常，很多网络用户的操作系统并不会及时更新系统，修补漏洞。这样造成了黑客可以通过极为廉价的成本就可以在网络上获得大量的僵尸主机，从而构建大规模的僵尸网络。<br>２、规模大：如今社会生活的方方面面都在数字化，网络终端数目极为庞大，黑客可控的僵尸网络种类越来越多，规模越来越大。<br>３、隐蔽性强：如上面所讲，僵尸网络给攻击者提供了强大的掩护，给DDoS攻击的反向追踪带来了极大的难度。<br>４、攻击方式多样：DDoS有着繁多的攻击模式，变种多，相应的防御难度大。<br>５、门槛低，利益大：由于背后黑色产业链的日趋成熟，大量攻击道具的出现，极度降低了成为DDoS攻击者的门槛，同时背后利益链条的庞大，也是主要推动DDoS攻击频发的因素。</p>
]]></content>
  </entry>
  <entry>
    <title>Flink实战（一）：订单支付实时监控</title>
    <url>/2019/12/17/Flink%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<h4 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h4><p>​        在电商平台中，最终创造收入和利润的是用户下单购买的环节；更具体一点，是用户真正完成支付动作的时候。用户下单的行为可以表明用户对商品的需求，但在现实中，并不是每次下单都会被用户立刻支付。当拖延一段时间后，用户支付的意愿会降低。所以为了让用户更有紧迫感从而提高支付转化率，同时也为了防范订单支付环节的安全风险，电商网站往往会对订单状态进行监控，设置一个失效时间（比如15分钟），如果下单后一段时间仍未支付，订单就会被取消。</p>
<p>​        本文将使用<strong>FlinkCEP</strong>库来实现这个功能。</p>
<a id="more"></a>

<h4 id="二、基本需求"><a href="#二、基本需求" class="headerlink" title="二、基本需求"></a>二、基本需求</h4><p>​    1.用户下单之后，应设置订单失效时间，以提高用户支付的意愿，并降低系统风险</p>
<p>​    2.用户下单后15分钟未支付，则输出监控信息</p>
<h4 id="三、解决思路"><a href="#三、解决思路" class="headerlink" title="三、解决思路"></a>三、解决思路</h4><p>​    利用 CEP 库进行事件流的模式匹配，并设定匹配的时间间隔。</p>
<h4 id="四、具体实验步骤"><a href="#四、具体实验步骤" class="headerlink" title="四、具体实验步骤"></a>四、具体实验步骤</h4><p>我们简化数据为：用户ID（orderId Long），事件类型（eventType String）,事件时间（eventTime Long）。</p>
<p>其中时间类型包括：create 和 pay</p>
<p>我们先将事件流按照订单号orderId分流，然后定义这样的一个事件模式：在15分钟内，事件“create”与“pay”非严格连续</p>
<h6 id="1-创建maven工程"><a href="#1-创建maven工程" class="headerlink" title="1.创建maven工程"></a>1.创建maven工程</h6><p>​    可以叫做OrderTimeoutDetect。</p>
<h6 id="2-配置pom文件"><a href="#2-配置pom文件" class="headerlink" title="2.配置pom文件"></a>2.配置pom文件</h6><p>因为需要使用CEP库 所以要引入相关依赖 </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;flink-cep_2.11&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;1.9.1&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>其他还有Flink通用的依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;flink-java&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;1.9.1&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;1.9.1&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>编译打包方式官方推荐用maven-shade-plugin。<a href="https://github.com/comsir/Flink-UserBehaviorAnalysis/blob/master/pom.xml" target="_blank" rel="noopener">完整pom链接</a></p>
<h6 id="3-定义POJO"><a href="#3-定义POJO" class="headerlink" title="3.定义POJO"></a>3.定义POJO</h6><p>定义OrderEvent <a href="https://github.com/comsir/Flink-UserBehaviorAnalysis/blob/master/OrderTimeoutDetect/src/main/java/OrderEvent.java" target="_blank" rel="noopener">完整类</a>输入的订单事件流；另外定义OrderResult <a href="https://github.com/comsir/Flink-UserBehaviorAnalysis/blob/master/OrderTimeoutDetect/src/main/java/OrderResult.java" target="_blank" rel="noopener">完整类</a>为输出显示的订单状态结果。</p>
<h6 id="4-创建主类OrderTimeout"><a href="#4-创建主类OrderTimeout" class="headerlink" title="4.创建主类OrderTimeout"></a>4.创建主类OrderTimeout</h6><p>先创建流作业的环境已经简单的配置 使用的是事件时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br><span class="line">env.setParallelism(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>测试用的自定义数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataStream&lt;OrderEvent&gt; dataSource = env.fromCollection(Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> OrderEvent(<span class="number">1L</span>, <span class="string">"create"</span>, <span class="number">1558430842L</span>),</span><br><span class="line">                <span class="keyword">new</span> OrderEvent(<span class="number">2L</span>, <span class="string">"create"</span>, <span class="number">1558430843L</span>),</span><br><span class="line">                <span class="keyword">new</span> OrderEvent(<span class="number">2L</span>, <span class="string">"pay"</span>, <span class="number">1558430844L</span>)</span><br><span class="line">        ))</span><br></pre></td></tr></table></figure>

<p>有了数据源之后，我们需要对数据流按照orderId做keyby分流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">KeyedStream&lt;OrderEvent, Long&gt; orderEventStream = dataSource.assignTimzestampsAndWatermarks(<span class="keyword">new</span> AscendingTimestampExtractor&lt;OrderEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractAscendingTimestamp</span><span class="params">(OrderEvent element)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> element.getEventTime() * <span class="number">1000</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .keyBy(<span class="keyword">new</span> KeySelector&lt;OrderEvent, Long&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Long <span class="title">getKey</span><span class="params">(OrderEvent value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> value.getOrderId();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure>

<p>在做keyBy之前日常加上waterMark。因为我们这里的时间的顺序的 所以用assignTimzestampsAndWatermarks就行，生产中很少用。</p>
<p>这样就得到了一个KeyedStream，留着备用。</p>
<h6 id="5-定义Pattern-匹配模式"><a href="#5-定义Pattern-匹配模式" class="headerlink" title="5.定义Pattern 匹配模式"></a>5.定义Pattern 匹配模式</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pattern&lt;OrderEvent, OrderEvent&gt; OrderPayPattern = Pattern.&lt;OrderEvent&gt;begin(<span class="string">"begin"</span>).where(<span class="keyword">new</span> SimpleCondition&lt;OrderEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(OrderEvent value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> value.getEventType().equals(<span class="string">"create"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//非严格连续 </span></span><br><span class="line">        .followedBy(<span class="string">"follow"</span>).where(<span class="keyword">new</span> SimpleCondition&lt;OrderEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(OrderEvent value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> value.getEventType().equals(<span class="string">"pay"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="comment">//设定超时时间</span></span><br><span class="line">    .within(Time.seconds(<span class="number">15</span>));</span><br></pre></td></tr></table></figure>

<h6 id="6-定义标签"><a href="#6-定义标签" class="headerlink" title="6.定义标签"></a>6.定义标签</h6><p>定义超时支付的输出标签，用标签sideOutput</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OutputTag&lt;OrderResult&gt; orderTimeoutOutput = <span class="keyword">new</span> OutputTag&lt;OrderResult&gt;(<span class="string">"orderTimeout"</span>)&#123;&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>特别注意：不是简单的new 一个类，是一个匿名内部类</strong></p>
<h6 id="7-数据流绑定pattern"><a href="#7-数据流绑定pattern" class="headerlink" title="7.数据流绑定pattern"></a>7.数据流绑定pattern</h6><p>将keyBy后的流绑定模式 keyedStream转换成patternStream</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PatternStream&lt;OrderEvent&gt; patternStream = CEP.pattern(orderEventStream, OrderPayPattern);</span><br></pre></td></tr></table></figure>

<h6 id="8-获取匹配到的数据流"><a href="#8-获取匹配到的数据流" class="headerlink" title="8.获取匹配到的数据流"></a>8.获取匹配到的数据流</h6><p>从patternStream中获取匹配的流（包括超时的和正常的  等等要分别处理）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataStream&lt;OrderResult&gt; completedDataStream = patternStream.select(</span><br><span class="line">   <span class="comment">//第一个参数 刚定义的超时输出的标签 </span></span><br><span class="line">   orderTimeoutOutput, </span><br><span class="line">   <span class="comment">//第二个参数 处理超时的流</span></span><br><span class="line">   <span class="keyword">new</span> PatternTimeoutFunction&lt;OrderEvent, OrderResult&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> OrderResult <span class="title">timeout</span><span class="params">(Map&lt;String, List&lt;OrderEvent&gt;&gt; pattern, <span class="keyword">long</span> timeoutTimestamp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    Long timeoutOrderId = pattern.getOrDefault(<span class="string">"begin"</span>, <span class="keyword">null</span>).iterator().next().getOrderId();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> OrderResult(timeoutOrderId, <span class="string">"timeout"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">     <span class="comment">//第三个参数 处理正常的流</span></span><br><span class="line">     <span class="keyword">new</span> PatternSelectFunction&lt;OrderEvent, OrderResult&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> OrderResult <span class="title">select</span><span class="params">(Map&lt;String, List&lt;OrderEvent&gt;&gt; pattern)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    Long payOrderId = pattern.getOrDefault(<span class="string">"follow"</span>, <span class="keyword">null</span>).iterator().next().getOrderId();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> OrderResult(payOrderId, <span class="string">"success"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure>

<h6 id="9-将completedDataStream中数据流分别输出"><a href="#9-将completedDataStream中数据流分别输出" class="headerlink" title="9.将completedDataStream中数据流分别输出"></a>9.将completedDataStream中数据流分别输出</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正常支付</span></span><br><span class="line">completedDataStream.print();</span><br><span class="line"><span class="comment">//超时支付</span></span><br><span class="line">DataStream&lt;OrderResult&gt; sideOutput = ((SingleOutputStreamOperator&lt;OrderResult&gt;) completedDataStream).getSideOutput(orderTimeoutOutput);sideOutput.print();</span><br><span class="line">env.execute(<span class="string">"order timeout job"</span>);</span><br></pre></td></tr></table></figure>

<p>完整的代码链接</p>
<p><a href="https://github.com/comsir/Flink-UserBehaviorAnalysis/tree/master/OrderTimeoutDetect" target="_blank" rel="noopener">https://github.com/comsir/Flink-UserBehaviorAnalysis/tree/master/OrderTimeoutDetect</a></p>
]]></content>
      <categories>
        <category>Flink</category>
      </categories>
      <tags>
        <tag>Flink</tag>
      </tags>
  </entry>
  <entry>
    <title>contos7单机安装hdfs</title>
    <url>/2019/12/17/contos7%E5%8D%95%E6%9C%BA%E5%AE%89%E8%A3%85hdfs/</url>
    <content><![CDATA[<p>背景：本文介绍在centos7中安装单机版的hdfs,供学习测试hdfs用。</p>
<a id="more"></a>
<ol>
<li>VMware15 </li>
<li>centos7</li>
<li>在非root目录下操作</li>
<li>jdk1.8.0_231</li>
<li>hadoop-3.1.3</li>
</ol>
<p><strong>一、配置JDK环境</strong></p>
<p>参考上一篇文章 <a href="https://blog.csdn.net/qq_31963719/article/details/103305446" target="_blank" rel="noopener">文章链接</a></p>
<p><strong>二、配置免密登入</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">cd ~&#x2F;.ssh</span><br><span class="line">cat id_rsa.pub&gt;&gt;authorized_keys</span><br><span class="line">#如果不能绵密登录，执行以下命令</span><br><span class="line">chmod 710 authorized_keys</span><br></pre></td></tr></table></figure>
<p>测试是否配置成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[song@master ~]$ ssh localhost</span><br><span class="line">Last login: Fri Nov 29 10:04:31 2019 from 192.168.91.1</span><br></pre></td></tr></table></figure>
<p>如上情况 说明配置成功</p>
<p><strong>三、下载hadoop</strong><br>官网下载比较慢 推荐几个国内的镜像网站：(开源软件的镜像基本都有)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;mirror.bit.edu.cn&#x2F;apache&#x2F;hadoop&#x2F;common&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;mirrors.hust.edu.cn&#x2F;apache&#x2F;hadoop&#x2F;common</span><br></pre></td></tr></table></figure>
<p>用的版本是<strong>hadoop-3.1.3.tar.gz</strong><br>用 liunx 命令 <strong>rz</strong> 上传到自己的目录/home/song/soft</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[song@master soft]$ ll</span><br><span class="line">drwxr-xr-x. 10 song song       161 Nov 28 13:34 hadoop-3.1.3</span><br><span class="line">-rw-r--r--.  1 song song 338075860 Nov 27 22:21 hadoop-3.1.3.tar.gz</span><br></pre></td></tr></table></figure>
<p>解压：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf hadoop-3.1.3.tar.gz</span><br></pre></td></tr></table></figure>
<p><strong>四、配置文件</strong><br>1.配置hadoop-env.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd hadoop-3.1.3</span><br><span class="line">vim etc&#x2F;hadoop&#x2F;hadoop-env.sh</span><br></pre></td></tr></table></figure>
<p>添加JDK路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;home&#x2F;song&#x2F;soft&#x2F;jdk1.8.0_231</span><br></pre></td></tr></table></figure>
<p>2.配置core-site.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd hadoop-3.1.3</span><br><span class="line">vim etc&#x2F;hadoop&#x2F;core-site.xml</span><br></pre></td></tr></table></figure>
<p>在&lt;configuration 中配置property</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 指定HDFS的（namenode）的通信地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;value&gt;hdfs:&#x2F;&#x2F;master(自己的hostname):9000&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;!-- 指定hadoop运行时产生文件的存储路径 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;value&gt;&#x2F;home&#x2F;song&#x2F;tmp&#x2F;hadoop&#x2F;tmp(自己的路径)&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>
<p>3.配置 hdfs-site.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd hadoop-3.1.3</span><br><span class="line">vim etc&#x2F;hadoop&#x2F;hdfs-site.xml</span><br></pre></td></tr></table></figure>
<p>在&lt;configuration 中配置property</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &lt;property&gt;</span><br><span class="line">      &lt;name&gt;dfs.name.dir&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;value&gt;&#x2F;home&#x2F;song&#x2F;tmp&#x2F;hadoop&#x2F;hdfs&#x2F;name&lt;&#x2F;value&gt;</span><br><span class="line">  &lt;&#x2F;property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">      &lt;name&gt;dfs.data.dir&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;value&gt;&#x2F;home&#x2F;song&#x2F;tmp&#x2F;hadoop&#x2F;hdfs&#x2F;data&lt;&#x2F;value&gt;</span><br><span class="line">  &lt;&#x2F;property&gt;</span><br><span class="line">  &lt;!-- 设置hdfs副本数量 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">      &lt;name&gt;dfs.replication&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;value&gt;1&lt;&#x2F;value&gt;</span><br><span class="line">  &lt;&#x2F;property&gt;</span><br><span class="line">&lt;!--hdfs的访问权限设置为false--&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">         &lt;name&gt;dfs.permissions&lt;&#x2F;name&gt;</span><br><span class="line">         &lt;value&gt;false&lt;&#x2F;value&gt;</span><br><span class="line">  &lt;&#x2F;property&gt;</span><br><span class="line">  &lt;!--web界面访问--&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">         &lt;name&gt;dfs.http.address&lt;&#x2F;name&gt;</span><br><span class="line">         &lt;value&gt;192.168.91.101(自己的主机IP):50070&lt;&#x2F;value&gt;</span><br><span class="line">  &lt;&#x2F;property&gt;</span><br><span class="line">  &lt;!--开启webhdfs--&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.webhdfs.enabled&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;true&lt;&#x2F;value&gt;</span><br><span class="line">  &lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>
<p><strong>五、启动hdfs</strong><br>第一次启动需要格式化namenode</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure>
<p>格式化完 启动hdfs</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd hadoop-3.1.3</span><br><span class="line">.&#x2F;sbin&#x2F;start-dfs.sh</span><br></pre></td></tr></table></figure>
<p>启动成功（我的主机名叫master）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Starting namenodes on [master]</span><br><span class="line">Starting datanodes</span><br><span class="line">Starting secondary namenodes [master]</span><br></pre></td></tr></table></figure>
<p>jps查看启动的进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3892 NameNode</span><br><span class="line">4038 DataNode</span><br><span class="line">4221 SecondaryNameNode</span><br></pre></td></tr></table></figure>
<p>最后就是在浏览器中测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.91.101(自己机器的IP):50070&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HDFS</category>
      </categories>
      <tags>
        <tag>hdfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Say hello to the world</title>
    <url>/2019/12/17/Say-hello-to-the-world/</url>
    <content><![CDATA[<p>博学之，审问之，慎思之</p>
]]></content>
  </entry>
</search>
